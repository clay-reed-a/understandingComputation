#!/usr/bin/ruby 
# Simple IMperative LanguagE

# build the ASTs by hand
# Add.new(
#	Mul.new(Num.new(1), Num.new(2)),
#	Mul.new(Num.new(3), Num.new(4))
# )


# define the SIMPLE expressions as Ruby classes 
class Num < Struct.new :value
	# override inspect so ast_alt doesn't happen 
	def to_s 
		value.to_s
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		false
	end 
end

class Add < Struct.new :left, :right 
	def to_s
		"#{left} + #{right}"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	# reduce the left value first 
	def reduce enviroment
		if left.reducible? 
			Add.new left.reduce(enviroment), right
		elsif right.reducible? 
			Add.new left, right.reduce(enviroment)
		else
			Num.new(left.value + right.value)
		end
	end 
end

class Mul < Struct.new :left, :right 
	def to_s 
		"#{left} * #{right}"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment 
		if left.reducible? 
			Mul.new left.reduce(enviroment), right 
		elsif right.reducible?
			Mul.new left, right.reduce(enviroment) 
		else 
			Num.new(left.value * right.value)
		end
	end 
end 

class Abs < Struct.new :statement, :enviroment
	def step 
		self.statement, self.enviroment = statement.reduce enviroment 
	end

	def run 
		while statement.reducible?
			puts statement, enviroment
			step 
		end 

		puts statement, enviroment
	end 
end 

class Boo < Struct.new :value
	def to_s
		value.to_s
	end 

	def inspect
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		false 
	end

end 

class Less < Struct.new :left, :right 
	def to_s
		"#{left} < #{right}"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment
		if left.reducible?
			Less.new(left.reduce(enviroment), right) 
		elsif right.reducible?
			Less.new(left, right.reduce(enviroment))
		else
			Boo.new(left.value < right.value)
		end 	
	end 
end 

class Var < Struct.new :name
	def to_s 
		name.to_s
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment 
		enviroment[name]
	end 
end 

# "it's convenient to have a special statement
# that represents a program whose execution
# has completed successfully" 

class DoNothing
	def to_s
		'do-nothing'
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def == other_statement
		other_statement.instance_of? DoNothing 
	end 

	def reducible?
		false 
	end 
end  

# non-destructively alter the enviroment 
class Assign < Struct.new :name, :expression 
	def to_s
		"#{name} = #{expression}"
	end

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment
		if expression.reducible?
			[Assign.new(name, expression.reduce(enviroment)), enviroment]
		else
			[DoNothing.new, enviroment.merge({ name => expression})] 
		end
	end 
end 

class If < Struct.new :cond, :conseq, :alt
	def to_s
		"if (#{cond}) { #{conseq} } else { #{alt} }"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment
		if cond.reducible?
			[If.new(cond.reduce(enviroment), conseq, alt), enviroment]
		else
			case cond
			when Boo.new(true)
				[conseq, enviroment]
			when Boo.new(false) 
				[alt, enviroment]
			end 
		end 
	end 
end 

class Seq < Struct.new :first, :second
	def to_s
		"#{first}; #{second}"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment
		case first 
		when DoNothing.new 
			[second, enviroment]
		else 
			reduced_first, reduced_enviroment = first.reduce enviroment
			[Seq.new(reduced_first,second), reduced_enviroment]
		end 
	end 
end 

class While < Struct.new :cond, :body 
	def to_s
		"while (#{cond}) { #{body} }"
	end 

	def inspect 
		"\u00ab#{self}\u00bb"
	end 

	def reducible?
		true 
	end 

	def reduce enviroment
		[If.new(cond, Seq.new(body, self), DoNothing.new), enviroment]
	end 
end 

# Don't do this in OOP. 
def reducible? expression
	case expression 
	when Num
		false 
	when Add, Mul
		false 
	end 
end 	 

ast_alt = <<AST_ALT
  #<struct Add 
	left=#<struct Mul 
		left=#<struct Num value=1>, 
		right=#<struct Num value=2>
	>, 
	right=#<struct Mul 
		left=#<struct Num value=3>, 
		right=#<struct Num value=4>
	>
   >
AST_ALT